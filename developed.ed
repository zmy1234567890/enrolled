#include <math.h>

// 计算两个信号的交叉相关
float cross_correlation(float* signal1, float* signal2, ) {
    float max_corr = 0;
    int max_idx = 0;
    
    // 计算交叉相关
    for (int i = 0; i < FFT_SIZE; i++) {
        float corr = 0;
        for (int j = 0; j < FFT_SIZE - i; j++) {
            corr += signal1[j] * signal2[j + i];
        }
        
        if (corr > max_corr) {
            max_corr = corr;
            max_idx = i;
        }
    }

    return max_idx;
}

// 计算信号相位差
float calculate_phase_diff_cross_correlation(float* signal1, float* signal2) {
    int shift_samples = cross_correlation(signal1, signal2);
    
    // 根据交叉相关的延迟计算相位差
    return (shift_samples / (float)size) * 2 * M_PI;
}


float calculate_thd(const float* magnitude, int fundamental_index) {
    float v1 = magnitude[fundamental_index];
    float sum = 0.0f;
    for (int i = 2; i <= 6; i++) {
        int idx = i * fundamental_index;
        if (idx < FFT_SIZE / 2) {
            sum += magnitude[idx] * magnitude[idx];
        }
    }
    return sqrtf(sum) / v1 * 100.0f;
}

float calculate_amplitude_ratio(float *magnitude1, float *magnitude2, int maxIndex) {
    float amplitude1 = magnitude1[maxIndex];  // 信号1的幅度
    float amplitude2 = magnitude2[maxIndex];  // 信号2的幅度
    
    // 计算幅度比值
    if (amplitude2 != 0) {
        return amplitude1 / amplitude2;  // 返回幅度比值
    } else {
        return 0;  // 如果信号2的幅度为0，返回0（避免除零错误）
    }
}
float window[FFT_SIZE];

// 1. 生成 Hanning 窗口
void generate_hanning_window() {
    for (int i = 0; i < FFT_SIZE; i++) {
        window[i] = 0.5f * (1.0f - cosf(2 * PI * i / (FFT_SIZE - 1)));
    }
}

// 2. 对原始数据加窗，填充为复数输入
void apply_window_and_prepare_fft(float* input, float* output, float* window) {
    for (int i = 0; i < FFT_SIZE; i++) {
        output[i] = input[i] * window[i];
    }
}



float estimate_vpp_rfft(float* magnitude,int max_index) {
   

    // 多频点能量叠加
    float energy = 0.0f;
    for (int i = max_index - 3; i <= max_index + 3; i++) {
        if (i >= 1 && i < FFT_SIZE / 2) {
            energy += magnitude[i] * magnitude[i];
        }
    }

    // 能量估算 Vpp（经验式：sqrt(2E) * 2）
    float vpp = 2.0f * sqrtf(energy);
    return vpp;
}
